%Code 3 
% This code takes the calculations from the previous code and performs the
% selections of the invasions. This code will contain the classification
% and machine learning. This performs the manual identification.

clearvars 
outputfolder = uigetdir('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\','Where would you like to store the converted data?');% Enter output folder
prompt = 'What name handle would you like to use? (s(number).mat will be added automatically)\\n (enter inside single quotes)\\n';
dlgtitle = 'Name Handle';
dims = [1 40];
outputname = inputdlg(prompt, dlgtitle, dims);

prompt = {' What experiment would you like to process? '}; % Enter ExpID
dlgtitle = 'Select Experiment';
dims = [1 40];
ExpID_ = string(inputdlg(prompt, dlgtitle, dims));

calc_folder = strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\', ExpID_,'_outputfolder_calc');
filenames = dir(fullfile(calc_folder,'*mat'));
total_num = numel(filenames);

seg_folder = strcat('C:\Users\Owner\OneDrive\Desktop\Stoll Fellowship Code\', ExpID_,'_outputfolder_seg');
filenames_seg = dir(fullfile(seg_folder,'*mat')); 

num_clicks = 0; % Initialize parameter to keep track of the total number of times user has clicked

%Table_A_Invasion_data = array2table(zeros(1,33)); % Initialize Tables to store data for clicked invasions
%Table_A_Invasion_data.Properties.VariableNames = {'Area' 'Centroid' 'BoundingBox' 'SubarrayIdx' 'MajorAxisLength' 'MinorAxisLength' 'Eccentricity' 'Orientation' 'ConvexHull' 'ConvexImage' 'ConvexArea' 'Circularity' 'Image' 'FilledImage' 'FilledArea' 'EulerNumber' 'Extrema' 'EquivDiameter' 'Solidity' 'Extent' 'PixelIdxList' 'PixelList' 'Perimeter' 'PerimeterOld' 'MaxFeretDiameter' 'MaxFeretAngle' 'MaxFeretCoordinates' 'MinFeretDiameter' 'MinFeretAngle' 'MinFeretCoordinates' 'tumor_number' 'day_number' 'amoeboid_index' };
%Table_M_Invasion_data = array2table(zeros(1,33));
%Table_C_Invasion_data = array2table(zeros(1,33));

for q = 1:total_num
   seg = load(fullfile(seg_folder, filenames_seg(q).name));
   f = load(fullfile(calc_folder, filenames(q).name)); 
   % Find the directory separators
    str = strcat(calc_folder, filenames(q).name);
    %Extract tumor number
    slashlocations = regexp(str, '_');
    substr = extractAfter(str, slashlocations(2)+7);
    tumor_num = extractBefore(substr, 2);
    % Extract the day 
    substr = extractAfter(str, slashlocations(3)+1);
    day_num = extractBefore( substr, 2);
   % Rename necessary variables 
   Invasions = f. Invasions;
   Tumor_coreBW_Mask = f. Tumor_coreBW_Mask;
   Width_tumor_core = f. Width_tumor_core;
   individual_invasion_sum = f. individual_invasion_sum;
   total_tumor_area = f. total_tumor_area;
   total_fraction_invaded = f. total_fraction_invaded; 
   collective_invasion_area = f. collective_invasion_area;
   table_core = f. table_core;
   
   Periphery = seg. Periphery;
   Max_area_thresh_BW = seg. Max_area_thresh_BW;
   Total_Tumor = seg. Total_Tumor;
   distance_to_cav = seg. distance_to_cav; 
   editedMask_cont = seg. editedMask_cont;
   Image = seg.Image;
   Max_area = seg. Max_area; 
   Max_xcor_cav = seg. Max_xcor_cav;
   cavity_BW = seg. cavity_BW;

Invasion_L = bwlabel(Invasions);
Invasion_L_C = bwlabel(Invasions); % Important for cropping images later in selection portion of code

%Initialize cell arrays to store data for selected invasions
index_collective_invasions = {};
index_amoeboid_invasions = {};
index_mesenchymal_invasions = {};

%Initialize arrays for both x and y coordinates of amoeboid invasions
X_A_cor = [];
Y_A_cor = [];
Subtract_C = imsubtract(editedMask_cont, Max_area);
imshow(Subtract_C);
Classify_Invasions = bwareaopen(Subtract_C, 300);
Classify_Invasions_L = bwlabel(Classify_Invasions);
labeled_Image = Classify_Invasions_L;
labeled_Image_C = Classify_Invasions_L;
stats_classify = regionprops(Classify_Invasions_L, 'Area');
Dim = size(stats_classify);
num_objects = Dim(1,1);
%imshow(Classify_Invasions_L);

if num_objects > 0
dlgtitle = 'Classify Individual Invasions';
uiwait(msgbox({'Please click on amoeboid invasions'; 'Please click return when you are finished selecting invasions'},dlgtitle));
imshow(Classify_Invasions);
count = 500;
num_clicks_A = 0;
cr_a = 0;
a = 0;
str = strings(1,500);
for i = 1:500
    str(1, i) = i;
end
while count < 1000
    hold on
[yCenter, xCenter] = ginput(1);
hold off
if isempty(yCenter)
    break;
end
% up number of times user clicked
num_clicks = num_clicks + 1;
num_clicks_A = num_clicks_A +1;
a = a + 1;
% put x over selected cell
hold on
labeled_Image = insertText(labeled_Image, [yCenter, xCenter], str(1, a), 'FontSize', 30, 'BoxColor', 'yellow', 'BoxOpacity', 0.5, 'TextColor', 'black');
imshow(labeled_Image); title('Labeled image')
% up the count
count = count + 1;
%Save coordinates into arrays
X_A_cor(num_clicks_A) = xCenter;
Y_A_cor(num_clicks_A) = yCenter;

end

%num_clicks = num_clicks + num_clicks_A;
for s = 1:num_clicks_A
    cr_a = cr_a + 1; % index for cropped amoeboid invasions cells
    % Initialize cell array to store tables for amoeboid invasions
    region_amoeboid = cell(33,a);
if num_clicks_A == 0
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, '.mat');
    save(string(savename),'labeled_Image');
    
else
    [L, num_Obj] = bwlabel(Classify_Invasions);
    b = bwboundaries(Classify_Invasions);
    Selec = cell(1,1);
    for k = 1:num_Obj
        Obj = L ==k;
        bb = b{k};
        X_obj = bb(:, 1);
        Y_obj = bb(:, 2);
        Selec{k} = inpolygon(X_A_cor(s),Y_A_cor(s),X_obj,Y_obj); 
    end
    Selec;
    Selec = [Selec{:}];
    [value,index] = max(Selec);
    Obj = L ==index;
    %figure, imshow(Obj);
    stats_A_invasion = regionprops(logical(Obj), 'all');
    stats_A_invasion_cell = struct2cell(stats_A_invasion);
    cell_image_bb = stats_A_invasion.BoundingBox;
    bbMatrix = vertcat(stats_A_invasion(:).BoundingBox);
    %get dimensions of bounding box 
    height = bbMatrix(:,3)+ 10; %height
    width = bbMatrix(:,4)+ 10; %width 
    X_cor_TL = bbMatrix(:,1) - 5;
    Y_cor_TL = bbMatrix(:, 2) - 5; 
    % Use bounding box dimensions to generate frame for individual cells 
    cell_image_cropped_amoeboid = imcrop(labeled_Image_C, [X_cor_TL, Y_cor_TL, height, width]);
    
    % get outline of cropped image
    cell_image_cropped_b = boundarymask(cell_image_cropped_amoeboid);
    
    cell_image = boundarymask(labeled_Image_C);
    %imshow(cell_image_cropped_b);
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid',num2str((cr_a)), '.mat');
    save(string(savename),'stats_A_invasion_cell', 'cell_image_cropped_amoeboid');
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'invasions_a','.mat');
    save(string(savename),'labeled_Image');
    
    
    tumor_number = str2num(tumor_num);
    day_number = str2num(day_num);
    amoeboid_index = cr_a;
    amoeboid = "amoeboid";
    Classification = amoeboid;
    % create a table containing tumor number, day number, and the number of
    % selected invasion that can be horizontally concatenated to the
    % Stats_A_Invasion table. This can then be vertically added to the main
    % table for amoeboid invasion statistics
    %savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid_table',num2str((cr_a)), '.mat');
    %save(string(savename),'stats_A_invasion_table');
    %region_amoeboid(cr_a) = stats_A_invasion_cell_tum_day;
    if s == 1
        stats_A_invasion_table_data = struct2table(stats_A_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, amoeboid_index, Classification);
        stats_A_invasion_table_first = horzcat(stats_A_invasion_table_data, Table_tu_day_Inv);
        stats_A_invasion_table = stats_A_invasion_table_first;
    end
    
    if s > 1
        stats_A_invasion_table_data = struct2table(stats_A_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, amoeboid_index, Classification);
        stats_A_invasion_table_new = horzcat(stats_A_invasion_table_data, Table_tu_day_Inv);
        stats_A_invasion_table = vertcat(stats_A_invasion_table_new, stats_A_invasion_table); 
    end
    
    %savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid_table',num2str((cr_a)), '.mat');
    %save(string(savename),'stats_A_invasion_table');
    
end
end
savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid_table_all_stats', '.mat');
save(string(savename),'stats_A_invasion_table');
    

dlgtitle = 'Classify Invasions';
uiwait(msgbox({'Please click on mesenchymal invasions'; 'Please click return when you are finished selecting invasions'},dlgtitle));
% Initialize arrays for both x and y coordinates for mesenchymal invasions
X_M_cor = [];
Y_M_cor = [];
%figure, imshow(Classify_Invasions);
count = 500;
%num_clicks = 0;
num_clicks_M = 0;% Initialize number of clicks for mesenchymal invasions
cr_m = 0;
m = 0;
str_M = strings(1,500);
for i = 1:500
    str_M(1, i) = i;
end
while count < 1000
    hold on
[yCenter_M, xCenter_M] = ginput(1);
hold off
if isempty(yCenter_M)
    break;
end
% up number of times user clicked
num_clicks_M = num_clicks_M +1;
m = m + 1; % index for cropped invasions images 
% put x over selected cell
hold on
%text = convertStringsToChars(str(1, num_clicks));
labeled_Image = insertText(labeled_Image, [yCenter_M, xCenter_M], str_M(1, m), 'FontSize', 30, 'BoxColor', 'cyan', 'BoxOpacity', 0.5, 'TextColor', 'black');
imshow(labeled_Image); title('Labeled image')
% up the count
count = count + 1;
%Save coordinates into arrays
X_M_cor(num_clicks_M) = xCenter_M;
Y_M_cor(num_clicks_M) = yCenter_M;
num_clicks_array(num_clicks) = num_clicks;
end

for t = 1:num_clicks_M
    cr_m = cr_m + 1; % index for analysis of selected cells
if num_clicks_M == 0
     savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'invasions_m', '.mat');
    save(string(savename),'labeled_Image');
    
else
    [L_M, num_Obj_M] = bwlabel(Classify_Invasions);
    b = bwboundaries(Classify_Invasions);
    Selec_M = cell(1,1);
    for k = 1:num_Obj_M
        Obj_M = L_M ==k;
        bb_M = b{k};
        X_obj_M = bb_M(:, 1);
        Y_obj_M = bb_M(:, 2);
        Selec_M{k} = inpolygon(X_M_cor(t),Y_M_cor(t),X_obj_M,Y_obj_M); 
    end
    Selec_M;
    Selec_M = [Selec_M{:}];
    [value,index] = max(Selec_M);
    Obj_M = L_M ==index;
    %figure, imshow(Obj_M);
    stats_M_invasion = regionprops(logical(Obj_M), 'all');
    stats_M_invasion_cell = struct2cell(stats_M_invasion);
    cell_image_bb = stats_M_invasion.BoundingBox;
    bbMatrix = vertcat(stats_M_invasion(:).BoundingBox);
    %get dimensions of bounding box 
    height_M = bbMatrix(:,3)+ 10; %height
    width_M = bbMatrix(:,4)+ 10; %width 
    X_cor_TL_M = bbMatrix(:,1) - 5;
    Y_cor_TL_M = bbMatrix(:, 2) - 5; 
    % Use bounding box dimensions to generate frame for individual cells 
    cell_image_cropped_M = imcrop(labeled_Image_C, [X_cor_TL_M, Y_cor_TL_M, height_M, width_M]);
    
    % get outline of cropped image
    cell_image_cropped_b = boundarymask(cell_image_cropped_M);
    
    cell_image = boundarymask(labeled_Image_C);
    %imshow(cell_image_cropped_b);
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'invasions_m', '.mat');
    save(string(savename),'labeled_Image');
    
     savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'mesenchymal',num2str((cr_m)), '.mat');
    save(string(savename),'stats_M_invasion_cell', 'cell_image_cropped_M');
    
    tumor_number = str2num(tumor_num);
    day_number = str2num(day_num);
    mesenchymal_index = cr_m;
    mesenchymal = "mesenchymal";
    Classification = mesenchymal; 
    % create a table containing tumor number, day number, and the number of
    % selected invasion that can be horizontally concatenated to the
    % Stats_A_Invasion table. This can then be vertically added to the main
    % table for amoeboid invasion statistics
    %savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid_table',num2str((cr_a)), '.mat');
    %save(string(savename),'stats_A_invasion_table');
    %region_amoeboid(cr_a) = stats_A_invasion_cell_tum_day;
    if t == 1
        stats_M_invasion_table_data = struct2table(stats_M_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, mesenchymal_index, Classification);
        stats_M_invasion_table_first = horzcat(stats_M_invasion_table_data, Table_tu_day_Inv);
        stats_M_invasion_table = stats_M_invasion_table_first;
    end
    
    if t > 1
        stats_M_invasion_table_data = struct2table(stats_M_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, mesenchymal_index, Classification);
        stats_M_invasion_table_new = horzcat(stats_M_invasion_table_data, Table_tu_day_Inv);
        stats_M_invasion_table = vertcat(stats_M_invasion_table_new, stats_M_invasion_table); 
    end
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'mesenchymal_table_all_stats', '.mat');
    save(string(savename),'stats_M_invasion_table')
   
end
end
end

X_C_cor = [];
Y_C_cor = [];
dlgtitle = 'Classify Collective Invasions';
uiwait(msgbox({'Please click on collective invasions'; 'Please click return when you are finished selecting invasions'},dlgtitle));
count = 500;
num_clicks_C = 0; % Keep track of how many times user has clicked
cr_c = 0;
g = 0;
num_clicks = 0;
figure, imshow(Invasion_L);

str_C = strings(1,500);
for i = 1:500
    str_C(1, i) = i;
end
while count < 1000
    hold on
[yCenter_C, xCenter_C] = ginput(1);
hold off
if isempty(yCenter_C)
    break;
end
% up number of times user clicked
num_clicks_C = num_clicks_C +1;
g = g + 1; % index for cropped invasions images 
% put x over selected cell
hold on
%text = convertStringsToChars(str(1, num_clicks));
Invasion_L = insertText(Invasion_L, [yCenter_C, xCenter_C], str_C(1,g), 'FontSize', 30, 'BoxColor', 'green', 'BoxOpacity', 0.5, 'TextColor', 'black');
imshow(Invasion_L); title('Labeled image')
% up the count
count = count + 1;
%Save coordinates into arrays
X_C_cor(num_clicks_C) = xCenter_C;
Y_C_cor(num_clicks_C) = yCenter_C;

end

for t = 1:num_clicks_C
    cr_c = cr_c + 1; % index for analysis of selected cells
if num_clicks_C == 0
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'.mat');
    save(string(savename),'Invasion_L');
    
else
    [L_C, num_Obj_C] = bwlabel(Invasions);
    b = bwboundaries(Invasions);
    Selec_C = cell(1,1);
    for k = 1:num_Obj_C
        Obj_C = L_C ==k;
        bb_C = b{k};
        X_obj_C = bb_C(:, 1);
        Y_obj_C = bb_C(:, 2);
        Selec_C{k} = inpolygon(X_C_cor(t),Y_C_cor(t),X_obj_C,Y_obj_C); 
    end
    Selec_C;
    Selec_C = [Selec_C{:}];
    [value_C,index_C] = max(Selec_C);
    Obj_C = L_C ==index_C;
    %figure, imshow(Obj_C);
    stats_C_invasion = regionprops(logical(Obj_C), 'all');
    stats_C_invasion_cell = struct2cell(stats_C_invasion);
    cell_image_bb = stats_C_invasion.BoundingBox;
    bbMatrix = vertcat(stats_C_invasion(:).BoundingBox);
    %get dimensions of bounding box 
    height_C = bbMatrix(:,3)+ 10; %height
    width_C = bbMatrix(:,4)+ 10; %width 
    X_cor_TL_C = bbMatrix(:,1) - 5;
    Y_cor_TL_C = bbMatrix(:, 2) - 5; 
    % Use bounding box dimensions to generate frame for individual cells 
    cell_image_cropped_C = imcrop(Invasion_L_C, [X_cor_TL_C, Y_cor_TL_C, height_C, width_C]);
    
    % get outline of cropped image
    cell_image_cropped_b = boundarymask(cell_image_cropped_C);
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'collective',num2str((cr_c)),'.mat');
    save(string(savename),'stats_C_invasion_cell','cell_image_cropped_C');
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'.mat');
    save(string(savename),'Invasion_L');
    
    tumor_number = str2num(tumor_num);
    day_number = str2num(day_num);
    
    collective_index = cr_c;
    % create a table containing tumor number, day number, and the number of
    % selected invasion that can be horizontally concatenated to the
    % Stats_A_Invasion table. This can then be vertically added to the main
    % table for amoeboid invasion statistics
    %savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'amoeboid_table',num2str((cr_a)), '.mat');
    %save(string(savename),'stats_A_invasion_table');
    %region_amoeboid(cr_a) = stats_A_invasion_cell_tum_day;
    if t == 1
        stats_C_invasion_table_data = struct2table(stats_C_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, collective_index);
        stats_C_invasion_table_first = horzcat(stats_C_invasion_table_data, Table_tu_day_Inv);
        stats_C_invasion_table = stats_C_invasion_table_first;
    end
    
    if t > 1
        stats_C_invasion_table_data = struct2table(stats_C_invasion, 'AsArray', true);
        Table_tu_day_Inv = table(tumor_number, day_number, collective_index);
        stats_C_invasion_table_new = horzcat(stats_C_invasion_table_data, Table_tu_day_Inv);
        stats_C_invasion_table = vertcat(stats_C_invasion_table_new, stats_C_invasion_table); 
    end
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num, 'collective_table_all_stats', '.mat');
    save(string(savename),'stats_C_invasion_table')
   
    
    savename = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'table_all_stats.mat');
    Tablename = table( distance_to_cav, Width_tumor_core, individual_invasion_sum, collective_invasion_area, total_tumor_area, total_fraction_invaded, tumor_number, day_number);
    save(string(savename), 'Tablename');
    
end
end
   

end

%Initialize Table which will hold all of the variables for all of the
%tumors
Table_all_stats = array2table(zeros(1,8));
Table_all_stats.Properties.VariableNames = {'distance_to_cav' 'Width_tumor_core' 'individual_invasion_sum' 'collective_invasion_area' 'total_tumor_area' 'total_fraction_invaded' 'tumor_number' 'day_number'};
for b = 1: (total_num)
    seg = load(fullfile(seg_folder, filenames_seg(b).name));
   f = load(fullfile(calc_folder, filenames(b).name)); 
   % Find the directory separators
    str = strcat(calc_folder, filenames(b).name);
    %Extract tumor number
    slashlocations = regexp(str, '_');
    substr = extractAfter(str, slashlocations(2)+7);
    tumor_num = extractBefore(substr, 2);
    % Extract the day 
    substr = extractAfter(str, slashlocations(3)+1);
    day_num = extractBefore( substr, 2);
    foldername = strcat(outputfolder,'/',outputname,'tu',tumor_num,'_d', day_num,'table_all_stats.mat');
table = load(foldername);
Tablename_1 = table.Tablename;
Table_all_stats = vertcat(Tablename_1, Table_all_stats);
end
Table_all_stats([total_num+1],:) = [];
size(Table_all_stats);
Table_all_stats = sortrows(Table_all_stats, tumor_number);
